version: 2.1

commands:
  # Exercise - Rollback
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #  id: 
    #    type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1            

orbs: 
  slack: circleci/slack@4.10.1
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build:
    docker:
      - image: cimg/node:17.2.0 # the primary container, where your job's commands are run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # check out the code in the project directory
      - run: echo "hello world" # run the `echo` command

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Run front-end Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run back-end Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]  
      - run:
          name: Run front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force            
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run back-end audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force            
            npm audit fix --audit-level=critical --force              
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists  
          #  npm install
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Run this in your exercise directory
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text >> ansible/inventory.txt
      - persist_to_workspace:
          root: ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:b2:6e:f2:a9:3f:a3:0c:8c:24:83:f0:66:cb:0d:b1"    
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/ansible             
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install tar, gzip, ansible, or awscli
          command: |
            apk update
            apk add tar gzip
            # install the dependencies needed for your playbook
            apk add --update ansible     
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*     
      - run:
          name: Install PIP
          command: sudo apt-get install python-pip python-dev
      - run:
          name: Install awscli
          command: sudo pip install awscli                             
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
       # Here's where you will add some code to rollback on failure   
      - destroy-environment  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]    
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "GV8aqQ9ituUoCqcQp41Kxo" in your local terminal first
                curl https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'                
            fi
            if curl --insure https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_${CIRCLE_WORKFLOW_ID:0:7} == 1
            then
              echo " key stored successfully"                
            fi
     # Here's where you will add some code to rollback on failure  
      - destroy-environment       

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:b2:6e:f2:a9:3f:a3:0c:8c:24:83:f0:66:cb:0d:b1"    
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip            
      - run:
          name: Install npm
          command: apk add npm   
      - run:
          name: Install nodejs
          command: apk add nodejs   
      - run:
          name: Install ansible
          command: apk add ansible   
      - run:          
          name: Install awscli
          command: pip install awscli                               
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=instance-state-name,Values=udapeople --output text)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="https://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env                   
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm install oauth2
            npm install webpack
            npm audit fix --audit-level=critical            
            npm audit fix --audit-level=critical     
            npm audit fix --audit-level=high                            
            npm audit --audit-level=critical                  
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure    
      - destroy-environment        

workflows:
  default:
    jobs:
      #- notify
      - build-frontend
      - build-backend
      #- run-migrations      
      - deploy-frontend      
      - test-frontend:
          requires: [build-frontend]  
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]    
      - configure-infrastructure:
          requires: [deploy-infrastructure]    
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]                                   