version: 2.1
# Note: # memstash.io is no longer available/accessible and
# also not able to extract the key from my personal setup https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/workflowid
# so using text file for workflow id key.

commands:
  # Exercise -  Rollback
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID
          command: |
            echo "Destroying environment for workflow id : ${CIRCLE_WORKFLOW_ID:0:7} "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region ${AWS_DEFAULT_REGION}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region ${AWS_DEFAULT_REGION}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

orbs:
  slack: circleci/slack@4.10.1
jobs:
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build:
    docker:
      - image: cimg/node:17.2.0 # the primary container, where your job's commands are run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
    steps:
      - checkout # check out the code in the project directory
      - run: echo "hello world" # run the `echo` command

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force            
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force            
            npm audit fix --audit-level=critical --force              
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          #  npm install
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add url to kvdb
          command: |
            WEBSITEURL=$(aws cloudformation describe-stacks \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text)
              
            echo ${WEBSITEURL}

            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "${WEBSITEURL}" https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text >> .circleci/ansible/inventory.txt)
              cat .circleci/ansible/inventory.txt
              
            echo ${BACKEND_IP}

            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "${BACKEND_IP}" https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6e:45:f0:86:6e:0c:f0:51:dc:c4:be:9c:91:de:07:f3"]
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      # Checkout code from git checking
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install tar, gzip, ansible, or awscli
          command: |
            apk update
            apk add tar gzip curl
            # install the dependencies needed for your playbook
            apk add --update ansible     
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Install awscli
          command: pip install awscli
      - run:
          name: Configure server
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/backend_ip)
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo ${BACKEND_IP}
            pwd
            ls
            echo ${BACKEND_IP} >> ./inventory.txt
            cat ./inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
        # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      - run:
          name: Run migrations
          command: |
            #echo NODE_ENV=production >> ~/project/backend/.env
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> ~/project/backend/.env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> ~/project/backend/.env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> ~/project/backend/.env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> ~/project/backend/.env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> ~/project/backend/.env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> ~/project/backend/.env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> ~/project/backend/.env
            cd ~/project/backend
            source ~/.profile
            echo "Sunil 1"
            nvm install v13.8.0
            echo "Sunil 2"
            npm install
            echo "Sunil 3"
            npm run migrations > migrations_dump.txt
            echo "Sunil 4"
      - run:
          # It seems like memstash.io is no longer available/accessible (?)
          name: Report migration results
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migration succeeded for ${CIRCLE_WORKFLOW_ID:0:7}"
              echo "1" >> ~/project/backend/migration-results.txt
            else
              echo "Migration failed for ${CIRCLE_WORKFLOW_ID:0:7}:"
              cat ~/project/backend/migrations_dump.txt
              echo "fail" >> ~/project/backend/migration-results.txt
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration-results.txt
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6e:45:f0:86:6e:0c:f0:51:dc:c4:be:9c:91:de:07:f3"]
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
      - run:
          name: Install npm
          command: apk add npm
      - run:
          name: Install ansible
          command: apk add ansible
      - run:
          name: Install awscli
          command: pip install awscli
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=instance-state-name,Values=udapeople --output text)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="https://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm install oauth2
            npm install webpack
            npm install oauth-sign@^0.9.0  
            npm audit fix
            npm audit fix --audit-level=critical     
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b7:ee:99:63:fe:52:a2:2b:4c:b9:52:1a:54:75:ba:ed:e1:39:02:8c"]
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add unzip
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install ansible
          command: |
            # your code here
            apk add --update ansible
            ansible --version
      - run:
          name: Install aws
          command: |
            pip install awscli --upgrade
            aws --version
      - run:
          name: Env File
          command: |
            echo VERSION=1 >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            # cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            ls
            echo "mv artifac to ansibble -------"
            mv artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
       #Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            echo "Frontend smoke test"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Get backend url and backend smoke test
          command: |
            # Fetch and prepare the BACKEND_IP env var   
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo ${BACKEND_IP}             
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Success backend test"
              return 0
            else
              echo "Unsuccess backend test"
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: cimg/python:3.9
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install -y curl tar gzip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            #your code here
            export previousWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $previousWorkflowID >> ~/previousWorkflowID.txt
            cat ~/previousWorkflowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo previousWorkflowID: "${previousWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - previousWorkflowID.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get previous stack workflow id
          command: |
            # get previous workflow id
            cat ~/previousWorkflowID.txt
            previousWorkflowID=$(cat ~/previousWorkflowID.txt)
            echo previousWorkflowID: "${previousWorkflowID}"
            export previousWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo previousWorkflowID: "${previousWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/previousWorkflowID.txt
            previousWorkflowID=$(cat ~/previousWorkflowID.txt)
            echo previousWorkflowID: "${previousWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${previousWorkflowID}" ]]
            then
               echo "---deleting---"
              aws s3 rb "s3://${previousWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${previousWorkflowID:10:7}" --region ${AWS_DEFAULT_REGION}
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${previousWorkflowID:10:7}" --region ${AWS_DEFAULT_REGION}
            fi
workflows:
  default:
    jobs:
      #- notify
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
