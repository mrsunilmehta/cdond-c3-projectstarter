version: 2.1

commands:
  # Exercise - Rollback
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          command: |
            echo "Destroying environment for workflow id : ${CIRCLE_WORKFLOW_ID:0:7} "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    docker:
      - image: circleci/node:13.8.0    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            success_migration=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_${CIRCLE_WORKFLOW_ID:0:7}}
            echo " success migration checking"
            if ((success_migrations== true));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

orbs: 
  slack: circleci/slack@4.10.1
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build:
    docker:
      - image: cimg/node:17.2.0 # the primary container, where your job's commands are run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # check out the code in the project directory
      - run: echo "hello world" # run the `echo` command

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Run front-end Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run back-end Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]  
      - run:
          name: Run front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force            
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run back-end audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force            
            npm audit fix --audit-level=critical --force              
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists  
          #  npm install
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add url to kvdb
          command: |
            WEBSITEURL=$(aws cloudformation describe-stacks \
              --region us-east-1 \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text)
              
            echo ${WEBSITEURL}
            
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "${WEBSITEURL}" https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/             
                    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --region us-east-1 \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text >> .circleci/ansible/inventory.txt)
              cat .circleci/ansible/inventory.txt
              
            echo ${BACKEND_IP}
            
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "${BACKEND_IP}" https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:b2:6e:f2:a9:3f:a3:0c:8c:24:83:f0:66:cb:0d:b1"    
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/             
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install tar, gzip, ansible, or awscli
          command: |
            apk update
            apk add tar gzip curl
            # install the dependencies needed for your playbook
            apk add --update ansible     
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*     
      - run:
          name: Install awscli
          command: pip install awscli                             
      - run:
          name: Configure server
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/backend_ip)
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo ${BACKEND_IP}
            pwd
            ls
            echo ${BACKEND_IP} >> ./inventory.txt
            cat ./inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
       # Here's where you will add some code to rollback on failure   
      - destroy-environment  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]    
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "GV8aqQ9ituUoCqcQp41Kxo" in your local terminal first
                curl https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'                
            fi
            if curl --insure https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/migration_${CIRCLE_WORKFLOW_ID:0:7} == 1
            then
              echo " key stored successfully"                
            fi
     # Here's where you will add some code to rollback on failure  
      - destroy-environment       

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:b2:6e:f2:a9:3f:a3:0c:8c:24:83:f0:66:cb:0d:b1"    
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip            
      - run:
          name: Install npm
          command: apk add npm   
      - run:
          name: Install ansible
          command: apk add ansible   
      - run:          
          name: Install awscli
          command: pip install awscli                               
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=instance-state-name,Values=udapeople --output text)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="https://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env                   
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm install oauth2
            npm install webpack
            npm install oauth-sign@^0.9.0  
            npm audit fix
            npm audit fix --audit-level=critical     
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure    
      - destroy-environment        

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:b2:6e:f2:a9:3f:a3:0c:8c:24:83:f0:66:cb:0d:b1"    
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip            
      - run:
          name: Install npm
          command: apk add npm   
      - run:
          name: Install ansible
          command: apk add ansible   
      - run:          
          name: Install awscli
          command: pip install awscli                               
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/backend
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # Fetch and prepare the BACKEND_IP env var
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo ${BACKEND_IP}             
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Success backend test"
              return 0
            else
              echo "Unsuccess backend test"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            echo "Will do Frontend test"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi            
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      
      - run:
          name: Update cloudfront distribution
          command: |
            WORKFLOWID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "$WORKFLOWID" https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/workflowid
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
 
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            OldWorkflowID=$(curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://kvdb.io/GV8aqQ9ituUoCqcQp41Kxo/workflowid)
            export OldWorkflowID="$OldWorkflowID"
            echo Old Workflow Id: "${OldWorkflowID}"
            # export STACKS=($(aws cloudformation list-stacks --region us-east-1 --query "StackSummaries[*]|[?starts_with(StackName,'uda')].StackName" --stack-status-filter CREATE_COMPLETE)) 
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
      
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID}/ --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            fi



workflows:
  default:
    jobs:
      #- notify
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]  
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]    
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]    
      - deploy-backend:
          requires: [run-migrations]                                         
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]          
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
